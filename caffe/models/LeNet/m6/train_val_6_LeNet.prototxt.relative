# LeNet training with Caffe 

name: "LeNet on MNIST m6 NO-inPlace"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    #crop_size: 28
    #mean_file: "INSERT_ABSOLUTE_PATH_HERE/input/mean.binaryproto"
    mean_value: 33.68
    mean_value: 33.68
    mean_value: 33.68
    #scale: 0.00390625 # multiply per (1.0/256)
  }
  data_param {
    source: "INSERT_ABSOLUTE_PATH_HERE/input/lmdb/train_lmdb"
    batch_size: 128 
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    #crop_size: 28
    #mean_file: "INSERT_ABSOLUTE_PATH_HERE/input/mean.binaryproto"
    mean_value: 33.68
    mean_value: 33.68
    mean_value: 33.68
    #scale: 0.00390625 # multiply per (1.0/256)
  }
  data_param {
    source: "INSERT_ABSOLUTE_PATH_HERE/input/lmdb/valid_lmdb"
    batch_size: 50
    backend: LMDB
  }
}

######## CONV1=>BN1=>RELU1=>POOL1=>CONV2=>BN2=>RELU2=>POOL2
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  # learning rate and decay multipliers for the filters  
    param {
      lr_mult: 1
      decay_mult: 1
    }
  # learning rate and decay multipliers for the biases    
    param {
      lr_mult: 2
      decay_mult: 0
    }  
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1     
    pad: 1  	  
    weight_filler {    
      #type: "gaussian"
       type: "xavier"      
      #std: 0.0001      
    }
    bias_filler {    
      type: "constant" 
      value: 0
    }    
  }
}
layer {
  name: "bn1"
  type: "BatchNorm"
  bottom: "conv1"
  top: "bn1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  batch_norm_param {
    use_global_stats: false
    #scale_filler {
    #   type: "constant"
    #   value: 1
    #}
    #bias_filler {
    #   type: "constant"
    #   value: 0
    #}
  }
}
layer {
  name: "scale1"
  type: "Scale"
  bottom: "bn1"
  top: "scale1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "scale1"
  top: "relu1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "relu1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  # learning rate and decay multipliers for the filters  
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate and decay multipliers for the biases    
  param {
    lr_mult: 2
    decay_mult: 0
  }  
  convolution_param {
    num_output: 50     
    kernel_size: 5     
    stride: 1          
    pad: 1  	       
    weight_filler {    
      #type: "gaussian"
       type: "xavier"   
      #std: 0.0001      
    }
    bias_filler {    
      type: "constant" 
      value: 0
    }    
  }
}
layer {
  name: "bn2"
  type: "BatchNorm"
  bottom: "conv2"
  top: "bn2"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }  
  batch_norm_param {
     use_global_stats: false
    #scale_filler {
    #  type: "constant"
    #  value: 1
    #}
    #bias_filler {
    #  type: "constant"
    #  value: 0
    #}
  }
}
layer {
  name: "scale2"
  type: "Scale"
  bottom: "bn2"
  top: "scale2"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "scale2"
  top: "relu2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "relu2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
######## FC1 => RELU3 => FC2 => SOFTMAX
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      #type: "gaussian"
      type: "xavier"  
      #std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
#  bottom: "scale3"
  bottom: "fc1"
  top: "relu3"
}
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "relu3"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      #type: "gaussian"
      type: "xavier"  
      #std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc2"
  bottom: "label"
  top: "loss"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
